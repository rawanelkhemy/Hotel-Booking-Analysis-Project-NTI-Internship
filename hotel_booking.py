# -*- coding: utf-8 -*-
"""Hotel Booking

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K-x2_K7C4LCSSsh2hbZMx4NG7M6a9BUL
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/hotel_bookings.csv')

df.head()

df2 = df.copy()

df.info()

df.describe()

print(df.isnull().sum())

percent_missing = df.isnull().sum() * 100 / len(df)
percent_missing

"""# Cleaning"""

#fill numerical columns with mean
df['adr'].fillna(df['adr'].mean(), inplace=True)
df['required_car_parking_spaces'].fillna(df['required_car_parking_spaces'].mean(), inplace=True)
df['total_of_special_requests'].fillna(df['total_of_special_requests'].mean(), inplace=True)

#fill country & agent with mode
df['country'].fillna(df['country'].mode()[0], inplace=True)
df['agent'].fillna(df['agent'].mode()[0], inplace=True)
# For columns with 1 missing value, use forward fill or backward fill
df['reservation_status'].fillna(method='ffill', inplace=True)
df['reservation_status_date'].fillna(method='ffill', inplace=True)

df.drop(columns='company', inplace=True)

print('the data is clean will done roowiii ;D' if df.isnull().sum().sum() == 0 else 'there are still missing values')

"""### changing data type"""

df['reservation_status_date'] = pd.to_datetime(df['reservation_status_date'])
df['children'] = df['children'].fillna(0).astype(int)
df['agent'] = df['agent'].astype(str)

df['arrival_date_month'].unique()

sns.heatmap(df.isnull())

print(df.select_dtypes(include='object').columns)

numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns

plt.figure(figsize=(12,8))
sns.heatmap(df[numeric_cols].corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

numeric_cols = df.select_dtypes(include='number').columns.tolist()
print(numeric_cols)

group1 = ['lead_time', 'stays_in_weekend_nights', 'stays_in_week_nights', 'adults', 'children', 'babies']
group2 = ['is_canceled', 'is_repeated_guest', 'previous_cancellations', 'previous_bookings_not_canceled', 'booking_changes', 'required_car_parking_spaces']
group3 = ['adr', 'days_in_waiting_list', 'total_of_special_requests']

plt.figure(figsize=(10, 6))
sns.heatmap(df[group1].corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap - Set 1')
plt.show()

plt.figure(figsize=(10, 6))
sns.heatmap(df[group2].corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap - Set 2')
plt.show()

plt.figure(figsize=(8, 4))
sns.heatmap(df[group3].corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap - Set 3')
plt.show()

cat_cols = ['hotel', 'customer_type', 'deposit_type', 'market_segment', 'distribution_channel']

fig, axs = plt.subplots(3, 2, figsize=(16, 12))

for i, col in enumerate(cat_cols):
    row = i // 2
    col_idx = i % 2
    sns.countplot(data=df, x=col, ax=axs[row, col_idx], order=df[col].value_counts().index)
    axs[row, col_idx].set_title(f'Count of {col}')
    axs[row, col_idx].tick_params(axis='x', rotation=45)

if len(cat_cols) % 2 != 0:
    axs[2, 1].axis('off')

plt.tight_layout()
plt.show()

columns_to_check = ['lead_time', 'adr', 'stays_in_week_nights', 'stays_in_weekend_nights']
fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(15, 10))
axes = axes.flatten()

for i, col in enumerate(columns_to_check):
    sns.boxplot(data=df, y=col, ax=axes[i], color='skyblue')
    axes[i].set_title(f'Outliers in {col}')

plt.tight_layout()
plt.show()

plt.figure(figsize=(16, 8))
skew_vals.plot(kind='bar', color='skyblue')
plt.title('Skewness of Numeric Features')
plt.ylabel('Skewness')
plt.xticks(rotation=65, ha='right')
plt.grid(axis='y')
plt.tight_layout()
plt.show()

numeric_columns = df.select_dtypes(include=["float64", "int64"]).columns.tolist()
for col in numeric_columns:
    unique_vals = df[col].nunique()
    print(f"{col} has {unique_vals} unique values.")
    if unique_vals <= 20:
        sns.countplot(data=df, x=col)
        plt.title(f"Bar Chart of {col}")
        plt.show()
    else:
        plt.figure(figsize=(12, 4))
        plt.subplot(1,2,1)
        sns.histplot(df[col], bins=30, color="g")
        plt.title(f"Histogram  of {col}")

        plt.subplot(1,2,2)
        sns.boxplot(x=df[col], color="g")
        plt.title(f"box plot of {col}")
        plt.show()

"""# DETECT OUTLIER"""

from scipy.stats import zscore
numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns
z_scores = zscore(df[numeric_cols])
outliers = (abs(z_scores) > 3)

outlier_count = outliers.sum(axis=0)
print(outlier_count)

def detect_outliers_iqr(df):
    outliers = pd.DataFrame()
    numeric_df = df.select_dtypes(include=['number'])

    for column in numeric_df.columns:
        Q1 = numeric_df[column].quantile(0.25)
        Q3 = numeric_df[column].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        outliers[column] = (numeric_df[column] < lower_bound) | (numeric_df[column] > upper_bound)

    return outliers

outliers_iqr = detect_outliers_iqr(df)

print("Outliers detected using IQR:")
print(outliers_iqr.sum())

"""# Scaler"""

from sklearn.preprocessing import StandardScaler
import scipy
from scipy import stats

scaler = StandardScaler()

#df['adr'] = scaler.fit_transform(df[['adr']])

#df['adr'].agg(['min',"max"])

#df2['adr'].agg(['min',"max"])

df.plot(kind = "box" , subplots = True , figsize = (13,13) , layout = (5,5))

df2.plot(kind = "box" , subplots = True , figsize = (13,13) , layout = (5,5))

df.to_csv('cleaned_Hotel_booking.csv', index=False)

